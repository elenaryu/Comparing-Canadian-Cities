{
    "cells": [
        {
            "cell_type": "markdown",
            "metadata": {
                "collapsed": true
            },
            "source": "# I will be conducting k-Means Analysis on large and smaller Canadian cities to determine how similar they are to each other"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "The six chosen cities and their correspondeing provinces are:\n- Toronto and Peterborough (Ontario)\n- Vancouver and Victoria (British Columbia)\n- Montreal and Gatinuea (Quebec)"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "### Importing the required libraries"
        },
        {
            "cell_type": "code",
            "execution_count": 7,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": "Libraries imported.\n"
                }
            ],
            "source": "import pandas as pd\nimport numpy as np\nimport requests\nfrom geopy.geocoders import Nominatim\n#!conda install -c conda-forge folium=0.5.0 --yes #comment out after first install\nimport folium\nimport json\nfrom pandas.io.json import json_normalize\nimport matplotlib.cm as cm\nimport matplotlib.colors as colors\nfrom sklearn.cluster import KMeans\n\nprint('Libraries imported.')"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "## Adding the 6 cities that will be examined today to a list"
        },
        {
            "cell_type": "code",
            "execution_count": 8,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": "['Gatineau, Quebec',\n 'Montreal, Quebec',\n 'Peterborough, Ontario',\n 'Toronto, Ontario',\n 'Vancouver, British Columbia',\n 'Victoria, British Columbia']"
                    },
                    "execution_count": 8,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "cities = ['Toronto, Ontario','Peterborough, Ontario','Vancouver, British Columbia','Victoria, British Columbia','Montreal, Quebec','Gatineau, Quebec'\n    ]\ncities.sort()\ncities"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "## Getting the latitude and longitude of each city"
        },
        {
            "cell_type": "code",
            "execution_count": 9,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>City</th>\n      <th>Latitude</th>\n      <th>Longitude</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Gatineau, Quebec</td>\n      <td>45.428360</td>\n      <td>-75.710620</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Montreal, Quebec</td>\n      <td>45.497216</td>\n      <td>-73.610364</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Peterborough, Ontario</td>\n      <td>44.304801</td>\n      <td>-78.319950</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Toronto, Ontario</td>\n      <td>43.653482</td>\n      <td>-79.383935</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Vancouver, British Columbia</td>\n      <td>49.260872</td>\n      <td>-123.113953</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Victoria, British Columbia</td>\n      <td>48.428318</td>\n      <td>-123.364953</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
                        "text/plain": "                          City   Latitude   Longitude\n0             Gatineau, Quebec  45.428360  -75.710620\n1             Montreal, Quebec  45.497216  -73.610364\n2        Peterborough, Ontario  44.304801  -78.319950\n3             Toronto, Ontario  43.653482  -79.383935\n4  Vancouver, British Columbia  49.260872 -123.113953\n5   Victoria, British Columbia  48.428318 -123.364953"
                    },
                    "execution_count": 9,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "columns = ['City', 'Latitude', 'Longitude']\ndf = pd.DataFrame(columns=columns)\n\nfor city in cities:\n    address = city\n    geolocator = Nominatim(user_agent=\"ny_explorer\")\n    location = geolocator.geocode(address)\n    latitude = location.latitude\n    longitude = location.longitude\n    df = df.append({'City':city, 'Latitude':latitude, 'Longitude':longitude}, ignore_index=True)\n\ndf"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "## Plotting the cities on a map"
        },
        {
            "cell_type": "code",
            "execution_count": 10,
            "metadata": {},
            "outputs": [],
            "source": "cities_map = folium.Map(location=[latitude,longitude], zoom_start=3)\n\n# adding markers\nfor lat, lng, city in zip(df['Latitude'], df['Longitude'], df['City']):\n    label = '{}'.format(city)\n    label = folium.Popup(label, parse_html=True)\n    folium.CircleMarker(\n        [lat, lng],\n        radius=10,\n        popup=label,\n        color='red',\n        fill=True,\n        fill_color='#0000FF',\n        fill_opacity=0.8,\n        parse_html=False).add_to(cities_map)"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "## Using Foursquare API to find 100 businesses per city"
        },
        {
            "cell_type": "code",
            "execution_count": 11,
            "metadata": {},
            "outputs": [],
            "source": "# define Foursquare credentials and version in hidden cell below"
        },
        {
            "cell_type": "code",
            "execution_count": 12,
            "metadata": {},
            "outputs": [],
            "source": "# The code was removed by Watson Studio for sharing."
        },
        {
            "cell_type": "code",
            "execution_count": 13,
            "metadata": {},
            "outputs": [],
            "source": "# extract the venue category\ndef get_category_type(row):\n    try:\n        categories_list = row['categories']\n    except:\n        categories_list = row['venue.categories']\n        \n    if len(categories_list) == 0:\n        return None\n    else:\n        return categories_list[0]['name']"
        },
        {
            "cell_type": "code",
            "execution_count": 14,
            "metadata": {},
            "outputs": [],
            "source": "LIMIT=100\nradius=500\n\ndef getNearbyVenues(names, latitudes, longitudes, radius=500):\n    \n    venues_list=[]\n    for name, lat, lng in zip(names, latitudes, longitudes):\n        print(name)\n            \n        # API request\n        url = 'https://api.foursquare.com/v2/venues/explore?&client_id={}&client_secret={}&v={}&ll={},{}&radius={}&limit={}'.format(CLIENT_ID,CLIENT_SECRET,VERSION,lat,lng,radius,LIMIT)\n            \n        # Get request\n        results = requests.get(url).json()[\"response\"]['groups'][0]['items']\n        \n        venues_list.append([(\n            name, \n            lat, \n            lng, \n            v['venue']['name'], \n            v['venue']['location']['lat'], \n            v['venue']['location']['lng'],  \n            v['venue']['categories'][0]['name']) for v in results])\n\n    nearby_venues = pd.DataFrame([item for venue_list in venues_list for item in venue_list])\n    nearby_venues.columns = ['City', \n                  'Latitude', \n                  'Longitude', \n                  'Venue', \n                  'Venue Latitude', \n                  'Venue Longitude', \n                  'Venue Category']\n    \n    return(nearby_venues)"
        },
        {
            "cell_type": "code",
            "execution_count": 15,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": "Gatineau, Quebec\nMontreal, Quebec\nPeterborough, Ontario\nToronto, Ontario\nVancouver, British Columbia\nVictoria, British Columbia\n(340, 7)\n"
                }
            ],
            "source": "city_venues = getNearbyVenues(names=df['City'],\n                                   latitudes=df['Latitude'],\n                                   longitudes=df['Longitude']\n                                  )\nprint(city_venues.shape)"
        },
        {
            "cell_type": "code",
            "execution_count": 16,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": "There are 120 unique venue categories.\n"
                }
            ],
            "source": "city_venues_loc = city_venues.iloc[1:]\ncity_venues_loc\n\nprint('There are {} unique venue categories.'.format(len(city_venues['Venue Category'].unique())))"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "## Conducting One-Hot Encoding"
        },
        {
            "cell_type": "code",
            "execution_count": 17,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>City</th>\n      <th>American Restaurant</th>\n      <th>Art Museum</th>\n      <th>Arts &amp; Crafts Store</th>\n      <th>Asian Restaurant</th>\n      <th>BBQ Joint</th>\n      <th>Bagel Shop</th>\n      <th>Bakery</th>\n      <th>Bank</th>\n      <th>Bar</th>\n      <th>...</th>\n      <th>Thai Restaurant</th>\n      <th>Theater</th>\n      <th>Toy / Game Store</th>\n      <th>Turkish Restaurant</th>\n      <th>Vegetarian / Vegan Restaurant</th>\n      <th>Video Game Store</th>\n      <th>Vietnamese Restaurant</th>\n      <th>Wine Bar</th>\n      <th>Wine Shop</th>\n      <th>Women's Store</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Gatineau, Quebec</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.00</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.148148</td>\n      <td>...</td>\n      <td>0.037037</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.00</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Montreal, Quebec</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.00</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.00</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Peterborough, Ontario</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.00</td>\n      <td>0.000000</td>\n      <td>0.020408</td>\n      <td>0.040816</td>\n      <td>0.040816</td>\n      <td>...</td>\n      <td>0.020408</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.00</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.020408</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Toronto, Ontario</td>\n      <td>0.023529</td>\n      <td>0.011765</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.00</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.011765</td>\n      <td>0.023529</td>\n      <td>...</td>\n      <td>0.011765</td>\n      <td>0.023529</td>\n      <td>0.011765</td>\n      <td>0.00</td>\n      <td>0.011765</td>\n      <td>0.011765</td>\n      <td>0.011765</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.011765</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Vancouver, British Columbia</td>\n      <td>0.013333</td>\n      <td>0.000000</td>\n      <td>0.013333</td>\n      <td>0.013333</td>\n      <td>0.00</td>\n      <td>0.026667</td>\n      <td>0.000000</td>\n      <td>0.013333</td>\n      <td>0.013333</td>\n      <td>...</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.00</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.013333</td>\n      <td>0.000000</td>\n      <td>0.013333</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Victoria, British Columbia</td>\n      <td>0.020000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.020000</td>\n      <td>0.01</td>\n      <td>0.000000</td>\n      <td>0.040000</td>\n      <td>0.000000</td>\n      <td>0.020000</td>\n      <td>...</td>\n      <td>0.020000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.01</td>\n      <td>0.040000</td>\n      <td>0.000000</td>\n      <td>0.010000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n  </tbody>\n</table>\n<p>6 rows \u00d7 121 columns</p>\n</div>",
                        "text/plain": "                          City  American Restaurant  Art Museum  \\\n0             Gatineau, Quebec             0.000000    0.000000   \n1             Montreal, Quebec             0.000000    0.000000   \n2        Peterborough, Ontario             0.000000    0.000000   \n3             Toronto, Ontario             0.023529    0.011765   \n4  Vancouver, British Columbia             0.013333    0.000000   \n5   Victoria, British Columbia             0.020000    0.000000   \n\n   Arts & Crafts Store  Asian Restaurant  BBQ Joint  Bagel Shop    Bakery  \\\n0             0.000000          0.000000       0.00    0.000000  0.000000   \n1             0.000000          0.000000       0.00    0.000000  0.000000   \n2             0.000000          0.000000       0.00    0.000000  0.020408   \n3             0.000000          0.000000       0.00    0.000000  0.000000   \n4             0.013333          0.013333       0.00    0.026667  0.000000   \n5             0.000000          0.020000       0.01    0.000000  0.040000   \n\n       Bank       Bar  ...  Thai Restaurant   Theater  Toy / Game Store  \\\n0  0.000000  0.148148  ...         0.037037  0.000000          0.000000   \n1  0.000000  0.000000  ...         0.000000  0.000000          0.000000   \n2  0.040816  0.040816  ...         0.020408  0.000000          0.000000   \n3  0.011765  0.023529  ...         0.011765  0.023529          0.011765   \n4  0.013333  0.013333  ...         0.000000  0.000000          0.000000   \n5  0.000000  0.020000  ...         0.020000  0.000000          0.000000   \n\n   Turkish Restaurant  Vegetarian / Vegan Restaurant  Video Game Store  \\\n0                0.00                       0.000000          0.000000   \n1                0.00                       0.000000          0.000000   \n2                0.00                       0.000000          0.000000   \n3                0.00                       0.011765          0.011765   \n4                0.00                       0.000000          0.000000   \n5                0.01                       0.040000          0.000000   \n\n   Vietnamese Restaurant  Wine Bar  Wine Shop  Women's Store  \n0               0.000000  0.000000   0.000000       0.000000  \n1               0.000000  0.000000   0.000000       0.000000  \n2               0.000000  0.020408   0.000000       0.000000  \n3               0.011765  0.000000   0.000000       0.011765  \n4               0.013333  0.000000   0.013333       0.000000  \n5               0.010000  0.000000   0.000000       0.000000  \n\n[6 rows x 121 columns]"
                    },
                    "execution_count": 17,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "cities_onehot = pd.get_dummies(city_venues[['Venue Category']], prefix = \"\", prefix_sep=\"\")\n\ncities_onehot['City'] = city_venues['City']\n\n# group by cities\n\ncities_grouped = cities_onehot.groupby('City').mean().reset_index()\ncities_grouped"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "## Selecting the top 10 business categories for each city"
        },
        {
            "cell_type": "code",
            "execution_count": 18,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>City</th>\n      <th>1st Most Common venue</th>\n      <th>2nd Most Common venue</th>\n      <th>3rd Most Common venue</th>\n      <th>4th Most Common Venue</th>\n      <th>5th Most Common Venue</th>\n      <th>6th Most Common Venue</th>\n      <th>7th Most Common Venue</th>\n      <th>8th Most Common Venue</th>\n      <th>9th Most Common Venue</th>\n      <th>10th Most Common Venue</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Gatineau, Quebec</td>\n      <td>American Restaurant</td>\n      <td>Paper / Office Supplies Store</td>\n      <td>Outdoor Supply Store</td>\n      <td>Office</td>\n      <td>Noodle House</td>\n      <td>Nightclub</td>\n      <td>New American Restaurant</td>\n      <td>Neighborhood</td>\n      <td>Music Venue</td>\n      <td>Monument / Landmark</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Montreal, Quebec</td>\n      <td>American Restaurant</td>\n      <td>Pizza Place</td>\n      <td>Pharmacy</td>\n      <td>Performing Arts Venue</td>\n      <td>Park</td>\n      <td>Paper / Office Supplies Store</td>\n      <td>Outdoor Supply Store</td>\n      <td>Office</td>\n      <td>Noodle House</td>\n      <td>Nightclub</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Peterborough, Ontario</td>\n      <td>American Restaurant</td>\n      <td>Outdoor Supply Store</td>\n      <td>Office</td>\n      <td>Noodle House</td>\n      <td>New American Restaurant</td>\n      <td>Neighborhood</td>\n      <td>Museum</td>\n      <td>Monument / Landmark</td>\n      <td>Modern European Restaurant</td>\n      <td>Miscellaneous Shop</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Toronto, Ontario</td>\n      <td>Italian Restaurant</td>\n      <td>French Restaurant</td>\n      <td>Frozen Yogurt Shop</td>\n      <td>Gaming Cafe</td>\n      <td>Garden</td>\n      <td>Rock Club</td>\n      <td>Residential Building (Apartment / Condo)</td>\n      <td>Greek Restaurant</td>\n      <td>Grocery Store</td>\n      <td>Record Shop</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Vancouver, British Columbia</td>\n      <td>Women's Store</td>\n      <td>Indonesian Restaurant</td>\n      <td>Pub</td>\n      <td>Record Shop</td>\n      <td>Hotel</td>\n      <td>History Museum</td>\n      <td>Historic Site</td>\n      <td>Hardware Store</td>\n      <td>Gym / Fitness Center</td>\n      <td>Residential Building (Apartment / Condo)</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Victoria, British Columbia</td>\n      <td>Women's Store</td>\n      <td>Liquor Store</td>\n      <td>Latin American Restaurant</td>\n      <td>Karaoke Bar</td>\n      <td>Jewelry Store</td>\n      <td>Sports Bar</td>\n      <td>Wine Shop</td>\n      <td>History Museum</td>\n      <td>Gym / Fitness Center</td>\n      <td>Shopping Mall</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
                        "text/plain": "                          City 1st Most Common venue  \\\n0             Gatineau, Quebec   American Restaurant   \n1             Montreal, Quebec   American Restaurant   \n2        Peterborough, Ontario   American Restaurant   \n3             Toronto, Ontario    Italian Restaurant   \n4  Vancouver, British Columbia         Women's Store   \n5   Victoria, British Columbia         Women's Store   \n\n           2nd Most Common venue      3rd Most Common venue  \\\n0  Paper / Office Supplies Store       Outdoor Supply Store   \n1                    Pizza Place                   Pharmacy   \n2           Outdoor Supply Store                     Office   \n3              French Restaurant         Frozen Yogurt Shop   \n4          Indonesian Restaurant                        Pub   \n5                   Liquor Store  Latin American Restaurant   \n\n   4th Most Common Venue    5th Most Common Venue  \\\n0                 Office             Noodle House   \n1  Performing Arts Venue                     Park   \n2           Noodle House  New American Restaurant   \n3            Gaming Cafe                   Garden   \n4            Record Shop                    Hotel   \n5            Karaoke Bar            Jewelry Store   \n\n           6th Most Common Venue                     7th Most Common Venue  \\\n0                      Nightclub                   New American Restaurant   \n1  Paper / Office Supplies Store                      Outdoor Supply Store   \n2                   Neighborhood                                    Museum   \n3                      Rock Club  Residential Building (Apartment / Condo)   \n4                 History Museum                             Historic Site   \n5                     Sports Bar                                 Wine Shop   \n\n  8th Most Common Venue       9th Most Common Venue  \\\n0          Neighborhood                 Music Venue   \n1                Office                Noodle House   \n2   Monument / Landmark  Modern European Restaurant   \n3      Greek Restaurant               Grocery Store   \n4        Hardware Store        Gym / Fitness Center   \n5        History Museum        Gym / Fitness Center   \n\n                     10th Most Common Venue  \n0                       Monument / Landmark  \n1                                 Nightclub  \n2                        Miscellaneous Shop  \n3                               Record Shop  \n4  Residential Building (Apartment / Condo)  \n5                             Shopping Mall  "
                    },
                    "execution_count": 18,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "def return_most_common_venues(row, num_top_venues):\n    row_categories = row.iloc[1:]\n    row_categories_sorted = row_categories.sort_values(ascending=True)\n    \n    return row_categories_sorted.index.values[0:num_top_venues]\n\nnum_top_venues = 10\n\nindicators = ['st','nd','rd']\n\ncolumns = ['City']\nfor ind in np.arange(num_top_venues):\n    try:\n        columns.append('{}{} Most Common venue'.format(ind+1, indicators[ind]))\n    except:\n        columns.append('{}th Most Common Venue'.format(ind+1))\n        \n# create new dataframe\ncities_venues_sorted = pd.DataFrame(columns=columns)\ncities_venues_sorted['City'] = cities_grouped['City']\n\nfor ind in np.arange(cities_grouped.shape[0]):\n    cities_venues_sorted.iloc[ind,1:] = return_most_common_venues(cities_grouped.iloc[ind,:], num_top_venues)\n    \ncities_venues_sorted"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "## Conducting k-Means Clustering Analysis"
        },
        {
            "cell_type": "code",
            "execution_count": 65,
            "metadata": {},
            "outputs": [
                {
                    "ename": "ValueError",
                    "evalue": "cannot insert Cluster Labels, already exists",
                    "output_type": "error",
                    "traceback": [
                        "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
                        "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
                        "\u001b[0;32m<ipython-input-65-7328bd872b36>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;31m# add clustering labels\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 10\u001b[0;31m \u001b[0mcities_venues_sorted\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minsert\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Cluster Labels'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkmeans\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlabels_\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     11\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0mmerged_cities\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcities_venues_sorted\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'City'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mon\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'City'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
                        "\u001b[0;32m/opt/conda/envs/Python36/lib/python3.6/site-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36minsert\u001b[0;34m(self, loc, column, value, allow_duplicates)\u001b[0m\n\u001b[1;32m   3471\u001b[0m         \u001b[0mvalue\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sanitize_column\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcolumn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbroadcast\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3472\u001b[0m         self._data.insert(loc, column, value,\n\u001b[0;32m-> 3473\u001b[0;31m                           allow_duplicates=allow_duplicates)\n\u001b[0m\u001b[1;32m   3474\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3475\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0massign\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
                        "\u001b[0;32m/opt/conda/envs/Python36/lib/python3.6/site-packages/pandas/core/internals/managers.py\u001b[0m in \u001b[0;36minsert\u001b[0;34m(self, loc, item, value, allow_duplicates)\u001b[0m\n\u001b[1;32m   1147\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mallow_duplicates\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mitem\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1148\u001b[0m             \u001b[0;31m# Should this be a different kind of error??\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1149\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'cannot insert {}, already exists'\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1150\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1151\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
                        "\u001b[0;31mValueError\u001b[0m: cannot insert Cluster Labels, already exists"
                    ]
                }
            ],
            "source": "kclusters = 6\n\ncities_grouped_clustering = cities_grouped.drop('City',1)\n\nkmeans = KMeans(n_clusters=kclusters,random_state=0).fit(cities_grouped_clustering)\n\nkmeans.labels_[0:6]\n\n# add clustering labels\ncities_venues_sorted.insert(1, 'Cluster Labels', kmeans.labels_)\n\nmerged_cities = cities_venues_sorted.join(df.set_index('City'), on='City')"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "## Mapping the clusters"
        },
        {
            "cell_type": "code",
            "execution_count": 21,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": "<div style=\"width:100%;\"><div style=\"position:relative;width:100%;height:0;padding-bottom:60%;\"><span style=\"color:#565656\">Make this Notebook Trusted to load map: File -> Trust Notebook</span><iframe src=\"about:blank\" style=\"position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;\" data-html= onload=\"this.contentDocument.open();this.contentDocument.write(atob(this.getAttribute('data-html')));this.contentDocument.close();\" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe></div></div>",
                        "text/plain": "<folium.folium.Map at 0x7fa6b9189198>"
                    },
                    "execution_count": 21,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "venue_groups_map = folium.Map(location=[latitude, longitude], zoom_start=4)\n\n# colour-code the clusters\nx = np.arange(kclusters)\nys = [i + x + (i*x)**2 for i in range(kclusters)]\ncolours_array = cm.rainbow(np.linspace(0,1,len(ys)))\nrainbow = [colors.rgb2hex(i) for i in colours_array]\n\n# add markers\nmarkers_colours = []\nfor lat, lon, poi, cluster in zip(merged_cities['Latitude'], merged_cities['Longitude'], merged_cities['City'], merged_cities['Cluster Labels']):\n    label = folium.Popup(str(poi) + ' Cluster ' + str(cluster), parse_html=True)\n    folium.CircleMarker(\n    [lat, lon],\n    radius=5,\n    popup=label,\n    color=rainbow[cluster-1],\n    fill=True,\n    fill_color=rainbow[cluster-1],\n    fill_opacity=0.8).add_to(venue_groups_map)\n    \nvenue_groups_map"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "## Plotting the 10 most common business venues in each city"
        },
        {
            "cell_type": "code",
            "execution_count": 136,
            "metadata": {},
            "outputs": [],
            "source": "cluster_1 = merged_cities[merged_cities['Cluster Labels'] == 0]\ncluster_2 = merged_cities[merged_cities['Cluster Labels'] == 1]\ncluster_3 = merged_cities[merged_cities['Cluster Labels'] == 2]\ncluster_4 = merged_cities[merged_cities['Cluster Labels'] == 3]\ncluster_5 = merged_cities[merged_cities['Cluster Labels'] == 4]\ncluster_6 = merged_cities[merged_cities['Cluster Labels'] == 5]\n\nlist_cluster = [cluster_1, cluster_2, cluster_3, cluster_4, cluster_5, cluster_6]\ntitles = list()\nfor k in range(6):\n    lst = list(list_cluster[k].City)\n    titles.append(' '.join(lst))"
        },
        {
            "cell_type": "code",
            "execution_count": 163,
            "metadata": {},
            "outputs": [],
            "source": "top_10_clusters = list()\nfor dfs in list_cluster:\n    temp_list = list()\n    for col in range(1, 5):\n        for i in range(0, dfs.shape[0]):\n            temp_list.append(dfs.iloc[i,col])\n    top_10_clusters.append(temp_list)"
        },
        {
            "cell_type": "code",
            "execution_count": 164,
            "metadata": {},
            "outputs": [],
            "source": "from collections import Counter\ndf_clusters = list()\nfor k in range(6):\n    each_cluster = Counter(top_10_clusters[k])\n    temp_df = pd.DataFrame.from_dict(each_cluster, orient='index').reset_index()\n    col = ['Type of Venue', 'Number of Venues']\n    temp_df.columns = col\n    temp_df.sort_values(by=['Number of Venues'], inplace=True)\n    df_clusters.append(temp_df)"
        },
        {
            "cell_type": "code",
            "execution_count": 168,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "image/png": "\n",
                        "text/plain": "<Figure size 1296x1440 with 6 Axes>"
                    },
                    "metadata": {
                        "needs_background": "light"
                    },
                    "output_type": "display_data"
                }
            ],
            "source": "import matplotlib.pyplot as plt\nfig, axs = plt.subplots(6, 1, figsize=(18, 20), constrained_layout=False)\n\nfor ax, k in zip(axs, range(6)):\n    ax.bar(df_clusters[k].iloc[1:,0], df_clusters[k].iloc[1:,1])\n    ax.set_title(titles[k])"
        }
    ],
    "metadata": {
        "kernelspec": {
            "display_name": "Python 3.6",
            "language": "python",
            "name": "python3"
        },
        "language_info": {
            "codemirror_mode": {
                "name": "ipython",
                "version": 3
            },
            "file_extension": ".py",
            "mimetype": "text/x-python",
            "name": "python",
            "nbconvert_exporter": "python",
            "pygments_lexer": "ipython3",
            "version": "3.6.9"
        }
    },
    "nbformat": 4,
    "nbformat_minor": 1
}